pragma solidity >0.4.24;

import "../accesscontrol/ConsumerRole.sol";
import "../accesscontrol/DistributorRole.sol";
import "../accesscontrol/FarmerRole.sol";
import "../accesscontrol/RetailerRole.sol";

// Define a contract 'Supplychain'
contract SupplyChain is ConsumerRole, DistributorRole, FarmerRole, RetailerRole {

  // Define 'owner'
  address owner;

  // Define a variable called 'upc' for Universal Product Code (UPC)
  uint  upc;

  // Define a variable called 'sku' for Stock Keeping Unit (SKU)
  uint  sku;

  // Define a public mapping 'avacados' that maps the UPC to an avacado.
  mapping (uint => Avacado) avacados;

  // Define a public mapping 'avacadoTxHistory' that maps the UPC to an array of TxHash,
  // that track its journey through the supply chain -- to be sent from DApp.
  mapping (uint => string[]) avacadoTxHistory;

  // Define enum 'State' with the following values:
  enum State {
    Harvested,      // 0
    Packed,         // 1
    Bought,         // 2
    Shipped,        // 3
    Received,       // 4
    Preconditioned, // 5
    OnSale,         // 6
    Purchased       // 7
  }

  State constant defaultState = State.Harvested;

  // Define a struct 'Avacado' with the following fields:
  struct Avacado {
    uint    sku;  // Stock Keeping Unit (SKU)
    uint    upc; // Universal Product Code (UPC), generated by the Farmer, goes on the package, can be verified by the Consumer
    address ownerID;  // Metamask-Ethereum address of the current owner as the product moves through 8 stages
    address originFarmerID; // Metamask-Ethereum address of the Farmer
    string  originFarmName; // Farmer Name
    string  originFarmInformation;  // Farmer Information
    string  originFarmLatitude; // Farm Latitude
    string  originFarmLongitude;  // Farm Longitude
    uint    productID;  // Product ID potentially a combination of upc + sku
    string  productNotes; // Product Notes
    uint    productPrice; // Product Price based on size of crates and weather sold loose or in packs
    State   avacadosState;  // Avacado State as represented in the enum above
    address distributorID;  // Metamask-Ethereum address of the Distributor
    address retailerID; // Metamask-Ethereum address of the Retailer
    address consumerID; // Metamask-Ethereum address of the Consumer
  }

  // Define 10 events with the same 8 state values and accept 'upc' as input argument
  event Harvested(uint upc);
  event Packed(uint upc);
  event Bought(uint upc);
  event Shipped(uint upc);
  event Received(uint upc);
  event Preconditioned(uint upc);
  event OnSale(uint upc);
  event Purchased(uint upc);

  // Define a modifer that checks to see if msg.sender == owner of the contract
  modifier onlyOwner() {
    require(msg.sender == owner, "Operation can be performed by owner only");
    _;
  }

  // Define a modifer that verifies the Caller
  modifier verifyCaller (address _address) {
    require(msg.sender == _address, "Requires sender to be owner of contract");
    _;
  }

  // Define a modifier that checks if the paid amount is sufficient to cover the price
  modifier paidEnough(uint _price) {
    require(msg.value >= _price, "Insufficient amount paid");
    _;
  }

  // Define a modifier that checks the price and refunds the remaining balance
  modifier checkValue(uint _upc) {
    _;
    uint _price = avacados[_upc].productPrice;
    uint amountToReturn = msg.value - _price;
    address(uint160(avacados[_upc].consumerID)).transfer(amountToReturn);
  }

  // Define a modifier that checks if an avacado.state of a upc is Harvested
  modifier harvested(uint _upc) {
    require(avacados[_upc].avacadosState == State.Harvested, "Requires current avacados to be Harvested");
    _;
  }

  // Define a modifier that checks if an avacados.state of a upc is Packed
  modifier packed(uint _upc) {
    require(avacados[_upc].avacadosState == State.Packed, "Requires current avacados to be Packed");
    _;
  }

  // Define a modifier that checks if an avacados.state of a upc is bought by exporter
  modifier bought(uint _upc) {
    require(avacados[_upc].avacadosState == State.Bought, "Requires current avacados to be Bought by exporter");
    _;
  }

   // Define a modifier that checks if an avacados.state of a upc is Shipped/exported
  modifier shipped(uint _upc) {
    require(avacados[_upc].avacadosState == State.Shipped, "Requires current avacados state to be exported");
    _;
  }

  // Define a modifier that checks if an avacados.state of a upc is Received
  modifier received(uint _upc) {
    require(avacados[_upc].avacadosState == State.Received, "Requires current avacados state to be Received by retail");
    _;
  }

  // Define a modifier that checks if an avacados.state of a upc is Pre-Conditioned
  modifier preconditioned(uint _upc) {
    require(avacados[_upc].avacadosState == State.Preconditioned, "Requires current avacados to be Preconditioned");
    _;
  }

  // Define a modifier that checks if an avacados.state of a upc is ForSale
  modifier onSale(uint _upc) {
    require(avacados[_upc].avacadosState == State.OnSale, "Requires current avacados to be OnSale in retail");
    _;
  }

  // Define a modifier that checks if an avacados.state of a upc is Purchased
  modifier purchased(uint _upc) {
    require(avacados[_upc].avacadosState == State.Purchased, "Requires current avacados state to be Purchased by customer");
    _;
  }


  // In the constructor set 'owner' to the address that instantiated the contract
  // and set 'sku' to 1
  // and set 'upc' to 1
  constructor() public payable {
    owner = msg.sender;
    sku = 1;
    upc = 1;
  }

  // Define a function 'kill' if required
  function kill() public {
    if (msg.sender == owner) {
      selfdestruct(address(uint160(owner)));
    }
  }

  // Define a function 'harvestAvacados' that allows a farmer to mark an avacados 'Harvested'
  function harvestAvacados(
    uint _upc,
    address _originFarmerID,
    string memory _originFarmName,
    string memory _originFarmInformation,
    string memory _originFarmLatitude,
    string memory _originFarmLongitude,
    string memory _productNotes
    ) public onlyFarmer() {
    // Add the new avacados as part of Harvest
    Avacado memory newAvacados;
    newAvacados.sku = sku;
    newAvacados.upc = _upc;
    newAvacados.ownerID = msg.sender;
    newAvacados.originFarmerID = _originFarmerID;
    newAvacados.originFarmName = _originFarmName;
    newAvacados.originFarmInformation = _originFarmInformation;
    newAvacados.originFarmLatitude = _originFarmLatitude;
    newAvacados.originFarmLongitude = _originFarmLongitude;
    newAvacados.productID = sku + _upc;
    newAvacados.productNotes = _productNotes;
    newAvacados.avacadosState = State.Harvested;

    avacados[_upc] = newAvacados;

    // Increment sku
    sku = sku + 1;
    // Emit the event
    emit Harvested(_upc);
  }

  // Define a function 'processtavacados' that allows a farmer to mark an avacados 'Processed'
  function processavacados(uint _upc) public
  // Call modifier to check if upc has passed previous supply chain stage
  harvested(_upc)
  // Call modifier to verify caller of this function
  //verifyCaller()
  {
    // Update the appropriate fields
    
    // Emit the appropriate event
    
  }

  // Define a function 'packavacados' that allows a farmer to mark an avacados 'Packed'
  function packAvacados(uint _upc) public 
  // Call modifier to check if upc has passed previous supply chain stage

  // Call modifier to verify caller of this function

  {
    // Update the appropriate fields
    
    // Emit the appropriate event
    
  }

  // Define a function 'sellavacados' that allows a farmer to mark an avacados 'ForSale'
  function sellavacados(uint _upc, uint _price) public 
  // Call modifier to check if upc has passed previous supply chain stage

  // Call modifier to verify caller of this function

  {
    // Update the appropriate fields
    
    // Emit the appropriate event
    
  }

  // Define a function 'buyavacados' that allows the disributor to mark an avacados 'Sold'
  // Use the above defined modifiers to check if the avacados is available for sale, if the buyer has paid enough, 
  // and any excess ether sent is refunded back to the buyer
  function buyavacados(uint _upc) public payable 
    // Call modifier to check if upc has passed previous supply chain stage
    
    // Call modifer to check if buyer has paid enough
    
    // Call modifer to send any excess ether back to buyer
    checkValue(_upc)
    {
    
    // Update the appropriate fields - ownerID, distributorID, avacadosState
    
    // Transfer money to farmer
    
    // emit the appropriate event
    
  }

  // Define a function 'shipavacados' that allows the distributor to mark an avacados 'Shipped'
  // Use the above modifers to check if the avacados is sold
  function shipavacados(uint _upc) public 
    // Call modifier to check if upc has passed previous supply chain stage
    
    // Call modifier to verify caller of this function
    
    {
    // Update the appropriate fields
    
    // Emit the appropriate event
    
  }

  // Define a function 'receiveavacados' that allows the retailer to mark an avacados 'Received'
  // Use the above modifiers to check if the avacados is shipped
  function receiveavacados(uint _upc) public 
    // Call modifier to check if upc has passed previous supply chain stage
    
    // Access Control List enforced by calling Smart Contract / DApp
    {
    // Update the appropriate fields - ownerID, retailerID, avacadosState
    
    // Emit the appropriate event
    
  }

  // Define a function 'purchaseavacados' that allows the consumer to mark an avacados 'Purchased'
  // Use the above modifiers to check if the avacados is received
  function purchaseavacados(uint _upc) public 
    // Call modifier to check if upc has passed previous supply chain stage
    
    // Access Control List enforced by calling Smart Contract / DApp
    {
    // Update the appropriate fields - ownerID, consumerID, avacadosState
    
    // Emit the appropriate event
    
  }

  // Define a function 'fetchavacadosBufferOne' that fetches the data
  function fetchAvacadosBufferOne(uint _upc) public view returns (
    uint    avacadosSKU,
    uint    avacadosUPC,
    address ownerID,
    address originFarmerID,
    string memory originFarmName,
    string memory originFarmInformation,
    string memory originFarmLatitude,
    string memory originFarmLongitude
  ) {
    Avacado memory avacadoBuffer = avacados[_upc];
  // Assign values to the 8 parameters
  return (
      avacadosSKU = avacadoBuffer.sku,
      avacadosUPC = avacadoBuffer.upc,
      ownerID = avacadoBuffer.ownerID,
      originFarmerID = avacadoBuffer.originFarmerID,
      originFarmName = avacadoBuffer.originFarmName,
      originFarmInformation = avacadoBuffer.originFarmInformation,
      originFarmLatitude = avacadoBuffer.originFarmLatitude,
      originFarmLongitude = avacadoBuffer.originFarmLongitude
    );
  }

  // Define a function 'fetchavacadosBufferTwo' that fetches the data
  function fetchAvacadosBufferTwo(uint _upc) public view returns (
    uint    avacadosSKU,
    uint    avacadosUPC,
    uint    productID,
    string memory productNotes,
    uint    productPrice,
    uint    avacadosState,
    address distributorID,
    address retailerID,
    address consumerID
  ) {
     Avacado memory avacadoBuffer = avacados[_upc];
    // Assign values to the 9 parameters
    return (
        avacadosSKU = avacadoBuffer.sku,
        avacadosUPC = avacadoBuffer.upc,
        productID = avacadoBuffer.productID,
        productNotes = avacadoBuffer.productNotes,
        productPrice = avacadoBuffer.productPrice,
        avacadosState = uint(avacadoBuffer.avacadosState),
        distributorID = avacadoBuffer.distributorID,
        retailerID = avacadoBuffer.retailerID,
        consumerID = avacadoBuffer.consumerID
      );
  }
}
