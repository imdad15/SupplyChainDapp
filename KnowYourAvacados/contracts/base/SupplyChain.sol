pragma solidity >0.4.24;
// Define a contract 'Supplychain'
contract SupplyChain {

  // Define 'owner'
  address owner;

  // Define a variable called 'upc' for Universal Product Code (UPC)
  uint  upc;

  // Define a variable called 'sku' for Stock Keeping Unit (SKU)
  uint  sku;

  // Define a public mapping 'items' that maps the UPC to an Item.
  mapping (uint => Item) items;

  // Define a public mapping 'itemsHistory' that maps the UPC to an array of TxHash,
  // that track its journey through the supply chain -- to be sent from DApp.
  mapping (uint => string[]) itemsHistory;

  // Define enum 'State' with the following values:
  enum State {
    Harvested,      // 0
    Packed,         // 1
    Bought,         // 2
    Exported,        // 3
    Imported,       // 4
    Preconditioned, // 5
    SentToRetail,   // 6
    Received,       // 7
    OnSale,         // 8
    Purchased       // 9
  }

  State constant defaultState = State.Harvested;

  // Define a struct 'Item' with the following fields:
  struct Item {
    uint    sku;  // Stock Keeping Unit (SKU)
    uint    upc; // Universal Product Code (UPC), generated by the Farmer, goes on the package, can be verified by the Consumer
    address ownerID;  // Metamask-Ethereum address of the current owner as the product moves through 8 stages
    address originFarmerID; // Metamask-Ethereum address of the Farmer
    string  originFarmName; // Farmer Name
    string  originFarmInformation;  // Farmer Information
    string  originFarmLatitude; // Farm Latitude
    string  originFarmLongitude;  // Farm Longitude
    uint    productID;  // Product ID potentially a combination of upc + sku
    string  productNotes; // Product Notes
    uint    productPrice; // Product Price
    State   itemState;  // Product State as represented in the enum above
    address exporterID;  // Metamask-Ethereum address of the Exporter
    address importerID;  // Metamask-Ethereum address of the Importerr
    address retailerID; // Metamask-Ethereum address of the Retailer
    address consumerID; // Metamask-Ethereum address of the Consumer
  }

  // Define 10 events with the same 8 state values and accept 'upc' as input argument
  event Harvested(uint upc);
  event Packed(uint upc);
  event Bought(uint upc);
  event Exported(uint upc);
  event Imported(uint upc);
  event Preconditioned(uint upc);
  event SentToRetail(uint upc);
  event Received(uint upc);
  event OnSale(uint upc);
  event Purchased(uint upc);

  // Define a modifer that checks to see if msg.sender == owner of the contract
  modifier onlyOwner() {
    require(msg.sender == owner, "Operation can be performed by owner only");
    _;
  }

  // Define a modifer that verifies the Caller
  modifier verifyCaller (address _address) {
    require(msg.sender == _address, "Requires sender to be owner of contract");
    _;
  }

  // Define a modifier that checks if the paid amount is sufficient to cover the price
  modifier paidEnough(uint _price) {
    require(msg.value >= _price, "Insufficient amount paid");
    _;
  }

  // Define a modifier that checks the price and refunds the remaining balance
  modifier checkValue(uint _upc) {
    _;
    uint _price = items[_upc].productPrice;
    uint amountToReturn = msg.value - _price;
    address(uint160(items[_upc].consumerID)).transfer(amountToReturn);
  }

  // Define a modifier that checks if an item.state of a upc is Harvested
  modifier harvested(uint _upc) {
    require(items[_upc].itemState == State.Harvested, "Requires current item to be Harvested");
    _;
  }

  // Define a modifier that checks if an item.state of a upc is Packed
  modifier packed(uint _upc) {
    require(items[_upc].itemState == State.Harvested, "Requires current item to be Packed");
    _;
  }

  // Define a modifier that checks if an item.state of a upc is bought by exporter
  modifier bought(uint _upc) {
    require(items[_upc].itemState == State.Harvested, "Requires current item to be Bought by exporter");
    _;
  }

   // Define a modifier that checks if an item.state of a upc is Shipped/exported
  modifier exported(uint _upc) {
    require(items[_upc].itemState == State.Harvested, "Requires current item state to be exported");
    _;
  }

  // Define a modifier that checks if an item.state of a upc is imported
  modifier imported(uint _upc) {
    require(items[_upc].itemState == State.Harvested, "Requires current item to be Imported/received by importer");
    _;
  }

  // Define a modifier that checks if an item.state of a upc is Pre-Conditioned
  modifier preconditioned(uint _upc) {
    require(items[_upc].itemState == State.Preconditioned, "Requires current item to be Preconditioned");
    _;
  }

  // Define a modifier that checks if an item.state of a upc is Pre-Conditioned
  modifier sentToRetail(uint _upc) {
    require(items[_upc].itemState == State.SentToRetail, "Requires current item state to be SentToTetail");
    _;
  }

  // Define a modifier that checks if an item.state of a upc is Received
  modifier received(uint _upc) {
    require(items[_upc].itemState == State.Received, "Requires current item state to be Received by retail");
    _;
  }

  // Define a modifier that checks if an item.state of a upc is ForSale
  modifier forSale(uint _upc) {
    require(items[_upc].itemState == State.OnSale, "Requires current item to be OnSale in retail");
    _;
  }

  // Define a modifier that checks if an item.state of a upc is Purchased
  modifier purchased(uint _upc) {
    require(items[_upc].itemState == State.Purchased, "Requires current item state to be Purchased by customer");
    _;
  }


  // In the constructor set 'owner' to the address that instantiated the contract
  // and set 'sku' to 1
  // and set 'upc' to 1
  constructor() public payable {
    owner = msg.sender;
    sku = 1;
    upc = 1;
  }

  // Define a function 'kill' if required
  function kill() public {
    if (msg.sender == owner) {
      selfdestruct(address(uint160(owner)));
    }
  }

  // Define a function 'harvestItem' that allows a farmer to mark an item 'Harvested'
  function harvestItem(uint _upc, address _originFarmerID, string memory _originFarmName, string memory _originFarmInformation,
                        string memory _originFarmLatitude, string memory _originFarmLongitude, string memory _productNotes) public {
    // Add the new item as part of Harvest
    
    // Increment sku
    sku = sku + 1;
    // Emit the event
    emit Harvested(sku);
  }

  // Define a function 'processtItem' that allows a farmer to mark an item 'Processed'
  function processItem(uint _upc) public
  // Call modifier to check if upc has passed previous supply chain stage

  // Call modifier to verify caller of this function

  {
    // Update the appropriate fields
    
    // Emit the appropriate event
    
  }

  // Define a function 'packItem' that allows a farmer to mark an item 'Packed'
  function packItem(uint _upc) public 
  // Call modifier to check if upc has passed previous supply chain stage

  // Call modifier to verify caller of this function

  {
    // Update the appropriate fields
    
    // Emit the appropriate event
    
  }

  // Define a function 'sellItem' that allows a farmer to mark an item 'ForSale'
  function sellItem(uint _upc, uint _price) public 
  // Call modifier to check if upc has passed previous supply chain stage

  // Call modifier to verify caller of this function

  {
    // Update the appropriate fields
    
    // Emit the appropriate event
    
  }

  // Define a function 'buyItem' that allows the disributor to mark an item 'Sold'
  // Use the above defined modifiers to check if the item is available for sale, if the buyer has paid enough, 
  // and any excess ether sent is refunded back to the buyer
  function buyItem(uint _upc) public payable 
    // Call modifier to check if upc has passed previous supply chain stage
    
    // Call modifer to check if buyer has paid enough
    
    // Call modifer to send any excess ether back to buyer
    checkValue(_upc)
    {
    
    // Update the appropriate fields - ownerID, distributorID, itemState
    
    // Transfer money to farmer
    
    // emit the appropriate event
    
  }

  // Define a function 'shipItem' that allows the distributor to mark an item 'Shipped'
  // Use the above modifers to check if the item is sold
  function shipItem(uint _upc) public 
    // Call modifier to check if upc has passed previous supply chain stage
    
    // Call modifier to verify caller of this function
    
    {
    // Update the appropriate fields
    
    // Emit the appropriate event
    
  }

  // Define a function 'receiveItem' that allows the retailer to mark an item 'Received'
  // Use the above modifiers to check if the item is shipped
  function receiveItem(uint _upc) public 
    // Call modifier to check if upc has passed previous supply chain stage
    
    // Access Control List enforced by calling Smart Contract / DApp
    {
    // Update the appropriate fields - ownerID, retailerID, itemState
    
    // Emit the appropriate event
    
  }

  // Define a function 'purchaseItem' that allows the consumer to mark an item 'Purchased'
  // Use the above modifiers to check if the item is received
  function purchaseItem(uint _upc) public 
    // Call modifier to check if upc has passed previous supply chain stage
    
    // Access Control List enforced by calling Smart Contract / DApp
    {
    // Update the appropriate fields - ownerID, consumerID, itemState
    
    // Emit the appropriate event
    
  }

  // Define a function 'fetchItemBufferOne' that fetches the data
  function fetchItemBufferOne(uint _upc) public view returns (
    uint    itemSKU,
    uint    itemUPC,
    address ownerID,
    address originFarmerID,
    string memory originFarmName,
    string memory originFarmInformation,
    string memory originFarmLatitude,
    string memory originFarmLongitude
  ) {
  // Assign values to the 8 parameters
  return (
    itemSKU,
    itemUPC,
    ownerID,
    originFarmerID,
    originFarmName,
    originFarmInformation,
    originFarmLatitude,
    originFarmLongitude
    );
  }

  // Define a function 'fetchItemBufferTwo' that fetches the data
  function fetchItemBufferTwo(uint _upc) public view returns (
    uint    itemSKU,
    uint    itemUPC,
    uint    productID,
    string memory productNotes,
    uint    productPrice,
    uint    itemState,
    address importerID,
    address exporterID,
    address retailerID,
    address consumerID
  ) {
    // Assign values to the 10 parameters
    return (
        itemSKU,
        itemUPC,
        productID,
        productNotes,
        productPrice,
        itemState,
        importerID,
        exporterID,
        retailerID,
        consumerID
      );
  }
}
