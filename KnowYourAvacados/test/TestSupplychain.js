// This script is designed to test the solidity smart contract - SuppyChain.sol -- and the various functions within
// Declare a variable and assign the compiled smart contract artifact
var SupplyChain = artifacts.require('SupplyChain')

contract('SupplyChain', function(accounts) {
    // Declare few constants and assign a few sample accounts generated by ganache-cli
    var sku = 1;
    var upc = 1;
    const ownerID = accounts[0];
    const originFarmerID = accounts[1];
    const originFarmName = "John Doe";
    const originFarmInformation = "Yarray Valley";
    const originFarmLatitude = "-38.239770";
    const originFarmLongitude = "144.341490";
    var productID = sku + upc;
    const productNotes = "Organic Hass Avacados from Mexico";
    const productWholeSalePrice = web3.utils.toWei("1", "ether");
    const productRetailPrice = web3.utils.toWei("4", "ether");
    var AvacadoState = 0;
    const distributorID = accounts[2];
    const retailerID = accounts[3];
    const consumerID = accounts[4];
    const emptyAddress = '0x00000000000000000000000000000000000000';

    ///Available Accounts
    ///==================
    ///(0) 0x27d8d15cbc94527cadf5ec14b69519ae23288b95
    ///(1) 0x018c2dabef4904ecbd7118350a0c54dbeae3549a
    ///(2) 0xce5144391b4ab80668965f2cc4f2cc102380ef0a
    ///(3) 0x460c31107dd048e34971e57da2f99f659add4f02
    ///(4) 0xd37b7b8c62be2fdde8daa9816483aebdbd356088
    ///(5) 0x27f184bdc0e7a931b507ddd689d76dba10514bcb
    ///(6) 0xfe0df793060c49edca5ac9c104dd8e3375349978
    ///(7) 0xbd58a85c96cc6727859d853086fe8560bc137632
    ///(8) 0xe07b5ee5f738b2f87f88b99aac9c64ff1e0c7917
    ///(9) 0xbd3ff2e3aded055244d66544c9c059fa0851da44

    console.log("ganache-cli accounts used here...");
    console.log("Contract Owner: accounts[0] ", accounts[0]);
    console.log("Farmer: accounts[1] ", accounts[1]);
    console.log("Distributer: accounts[2] ", accounts[2]);
    console.log("Retailer: accounts[3] ", accounts[3]);
    console.log("Consumer: accounts[4] ", accounts[4]);

    // 1st Test
    it("Testing smart contract function addFarmer() that allows a farmer to be added.", async () => {
            const supplyChain = await SupplyChain.deployed();
        
        // Declare and Initialize a variable for event
            var eventEmitted = false;
        
            // Watch the emitted event Harvested()
            await supplyChain.FarmerAdded((err, res) => {
                eventEmitted = true;
            })                

            await supplyChain.addFarmer(originFarmerID, {from: ownerID});

            const isFarmerRegistered = await supplyChain.isFarmer(originFarmerID,  {from: ownerID});

            assert.equal(isFarmerRegistered, true, 'Error: Farmer not registered');
            assert.equal(eventEmitted, true, 'Invalid event emitted');
        });

    // 2nd Test
    it("Testing smart contract function addDistributor() that allows a distributor to be added.", async () => {
        const supplyChain = await SupplyChain.deployed();
        
        // Declare and Initialize a variable for event
        var eventEmitted = false;
        
        // Watch the emitted event Harvested()
        await supplyChain.DistributorAdded((err, res) => {
            eventEmitted = true;
        })                

        await supplyChain.addDistributor(distributorID, {from: ownerID});

        const isDistributorRegistered = await supplyChain.isDistributor(distributorID,  {from: ownerID});

        assert.equal(isDistributorRegistered, true, 'Error: Distributor not registered');
        assert.equal(eventEmitted, true, 'Invalid event emitted');
    });

    // 3rd Test
    it("Testing smart contract function addRetailer() that allows a retailer to be added.", async () => {
        const supplyChain = await SupplyChain.deployed();
        
        // Declare and Initialize a variable for event
        var eventEmitted = false;
        
        // Watch the emitted event Harvested()
        await supplyChain.RetailerAdded((err, res) => {
            eventEmitted = true;
        })                

        await supplyChain.addRetailer(retailerID, {from: ownerID});

        const isRetailerRegistered = await supplyChain.isRetailer(retailerID,  {from: ownerID});

        assert.equal(isRetailerRegistered, true, 'Error: Retailer not registered');
        assert.equal(eventEmitted, true, 'Invalid event emitted');
    });

    // 4th Test
    it("Testing smart contract function addConsumer() that allows a consumer to be added.", async () => {
        const supplyChain = await SupplyChain.deployed();
        
        // Declare and Initialize a variable for event
        var eventEmitted = false;
        
        // Watch the emitted event Harvested()
        await supplyChain.ConsumerAdded((err, res) => {
            eventEmitted = true;
        })                

        await supplyChain.addConsumer(consumerID, {from: ownerID});

        const isConsumerRegistered = await supplyChain.isConsumer(consumerID,  {from: ownerID});

        assert.equal(isConsumerRegistered, true, 'Error: Consumer not registered');
        assert.equal(eventEmitted, true, 'Invalid event emitted');
    });

    // 5th Test
    it("Testing smart contract function harvestAvacado() that allows a farmer to harvest avacado", async() => {
        const supplyChain = await SupplyChain.deployed();
        
        // Declare and Initialize a variable for event
        var eventEmitted = false;
        
        // Watch the emitted event Harvested()
        await supplyChain.Harvested((err, res) => {
            eventEmitted = true;
        })

        // Mark an Avacado as Harvested by calling function harvestAvacado()
        await supplyChain.harvestAvacados(upc, originFarmerID, originFarmName, originFarmInformation, originFarmLatitude, originFarmLongitude, productNotes,  {from: originFarmerID});

        // Retrieve the just now saved Avacado from blockchain by calling fetch
        const resultBufferOne = await supplyChain.fetchAvacadosBufferOne.call(upc);
        const resultBufferTwo = await supplyChain.fetchAvacadosBufferTwo.call(upc);
        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid Avacado SKU');
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid Avacado UPC');
        assert.equal(resultBufferOne[2], originFarmerID, 'Error: Missing or Invalid ownerID');
        assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID');
        assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName');
        assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation');
        assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude');
        assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude');
        assert.equal(resultBufferTwo[5], 0, 'Error: Invalid Avacado State');
        assert.equal(eventEmitted, true, 'Invalid event emitted');
    })    

    // 6th Test
    it("Testing smart contract function packAvacado() that allows a farmer to pack avacados", async() => {
        const supplyChain = await SupplyChain.deployed();
        
        // Declare and Initialize a variable for event
        var eventEmitted = false;
        
        // Watch the emitted event Packed()
        await supplyChain.Packed((err,res)=> {
            eventEmitted = true;
        });
        
        // Mark an Avacado as Packed by calling function packAvacados()
        await supplyChain.packAvacados(upc, {from: originFarmerID});

        // Retrieve the just now saved Avacado from blockchain by calling fetch
        const resultBufferOne = await supplyChain.fetchAvacadosBufferOne.call(upc);
        const resultBufferTwo = await supplyChain.fetchAvacadosBufferTwo.call(upc);
        
        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid Avacado SKU');
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid Avacado UPC');
        assert.equal(resultBufferOne[2], originFarmerID, 'Error: Missing or Invalid ownerID');
        assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID');
        assert.equal(resultBufferTwo[5], 1, 'Error: Invalid Avacado State');
        assert.equal(eventEmitted, true, 'Invalid event emitted');
    })    

    // 7th Test
    it("Testing smart contract function wholsaleAvacados() that allows a farmer to sell avacados", async() => {
        const supplyChain = await SupplyChain.deployed();
        
        // Declare and Initialize a variable for event
        var eventEmitted = false;
        
        // Watch the emitted event ForSale()
        await supplyChain.OnWholesale((err, res) => {
            eventEmitted = true;
        });
        
        // Mark an Avacado as OnWholesale by calling function wholeSaleAvacados()
        await supplyChain.wholesaleAvacados(upc, productWholeSalePrice, {from: originFarmerID})

        // Retrieve the just now saved Avacado from blockchain by calling fetch
        const resultBufferOne = await supplyChain.fetchAvacadosBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchAvacadosBufferTwo.call(upc)
        
        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid Avacado SKU');
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid Avacado UPC');
        assert.equal(resultBufferOne[2], originFarmerID, 'Error: Missing or Invalid ownerID');
        assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID');
        assert.equal(resultBufferTwo[5], 2, 'Error: Invalid Avacado State');
        assert.equal(eventEmitted, true, 'Invalid event emitted');
    })    

    // 8th Test
    it("Testing smart contract function buyAvacados() that allows a distributor to buy avacados", async() => {
        const supplyChain = await SupplyChain.deployed();
        
        // Declare and Initialize a variable for event
        var eventEmitted = false;
        
        // Watch the emitted event Sold()
        await supplyChain.Bought((err, res) => {
            eventEmitted = true;
        });
        

        // Mark an Avacado as Sold by calling function buyAvacados()
        await supplyChain.buyAvacados(upc, {from: distributorID, value: productWholeSalePrice});
        
        // Retrieve the just now saved Avacado from blockchain by calling fetch
        const resultBufferOne = await supplyChain.fetchAvacadosBufferOne.call(upc);
        const resultBufferTwo = await supplyChain.fetchAvacadosBufferTwo.call(upc);
        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid Avacado SKU');
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid Avacado UPC');
        assert.equal(resultBufferOne[2], distributorID, 'Error: Missing or Invalid ownerID');
        assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID');
        assert.equal(resultBufferTwo[5], 3, 'Error: Invalid Avacado State');
        assert.equal(eventEmitted, true, 'Invalid event emitted');
    })    

    // 9th Test
    it("Testing smart contract function shipAvacado() that allows a distributor to ship avacados", async() => {
        const supplyChain = await SupplyChain.deployed();
        
        // Declare and Initialize a variable for event
        var eventEmitted = false;
        
        // Watch the emitted event Shipped()
        await supplyChain.Shipped((err, res) => {
            eventEmitted = true;
        });
        
        // Mark an Avacado as Shipped by calling function shipAvacados()
        await supplyChain.shipAvacados(upc, { from: distributorID });

        // Retrieve the just now saved Avacado from blockchain by calling fetch
        const resultBufferOne = await supplyChain.fetchAvacadosBufferOne.call(upc);
        const resultBufferTwo = await supplyChain.fetchAvacadosBufferTwo.call(upc);
        
        // Verify the result set
        assert.equal(resultBufferOne[2], distributorID, 'Error: Missing or Invalid ownerID');
        assert.equal(resultBufferTwo[5], 4, 'Error: Invalid Avacado State');
        assert.equal(eventEmitted, true, 'Invalid event emitted');
    })    

    // 10th Test
    it("Testing smart contract function receiveAvacado() that allows a retailer to mark avacados as Received", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false;
        
        // Watch the emitted event Received()
        await supplyChain.Received((err, res) => {
            eventEmitted = true;
        });
        
        // Mark an Avacado as Received by calling function buyAvacado()
        await supplyChain.receiveAvacados(upc, { from: retailerID })

        // Retrieve the just now saved Avacado from blockchain by calling fetch
        const resultBufferOne = await supplyChain.fetchAvacadosBufferOne.call(upc);
        const resultBufferTwo = await supplyChain.fetchAvacadosBufferTwo.call(upc);
        
        // Verify the result set
        assert.equal(resultBufferOne[2], retailerID, 'Error: Missing or Invalid ownerID');
        assert.equal(resultBufferTwo[5], 5, 'Error: Invalid Avacado State');
        assert.equal(eventEmitted, true, 'Invalid event emitted');

    })  
        

        // Verify the result set
             
    })    

    // 8th Test
    it("Testing smart contract function purchaseItem() that allows a consumer to purchase coffee", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        
        
        // Watch the emitted event Purchased()
        

        // Mark an item as Sold by calling function buyItem()
        

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        

        // Verify the result set
        
    })    

    // 9th Test
    it("Testing smart contract function fetchItemBufferOne() that allows anyone to fetch item details from blockchain", async() => {
        const supplyChain = await SupplyChain.deployed()

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        
        
        // Verify the result set:
        
    })

    // 10th Test
    it("Testing smart contract function fetchItemBufferTwo() that allows anyone to fetch item details from blockchain", async() => {
        const supplyChain = await SupplyChain.deployed()

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        
        
        // Verify the result set:
        
    })

});

